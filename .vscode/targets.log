make all --print-data-base --no-builtin-variables --no-builtin-rules --question
make: *** No rule to make target 'all'.  Stop.

# GNU Make 4.2.1
# Built for x86_64-pc-linux-gnu
# Copyright (C) 1988-2016 Free Software Foundation, Inc.
# License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
# This is free software: you are free to change and redistribute it.
# There is NO WARRANTY, to the extent permitted by law.

# Make data base, printed on Sat Oct 22 20:27:35 2022

# Variables

# automatic
<D = $(patsubst %/,%,$(dir $<))
# automatic
?F = $(notdir $?)
# environment
WSLENV = VSCODE_WSL_EXT_LOCATION/up
# default
.SHELLFLAGS := -c
# makefile (from 'Makefile', line 5)
# := 
# makefile (from 'Makefile', line 13)
CONTAINER_BUILD_PATH = $(CONTAINER_PROJECT_PATH)/build
# automatic
?D = $(patsubst %/,%,$(dir $?))
# makefile (from '.env', line 8)
FILE_LOC = "dockerfiles"
# automatic
@D = $(patsubst %/,%,$(dir $@))
# automatic
@F = $(notdir $@)
# makefile
CURDIR := /home/fictor/dev/clean/simplyV3
# makefile
SHELL = /bin/sh
# environment
VSCODE_NLS_CONFIG = {"locale":"en","availableLanguages":{}}
# environment
_ = /home/fictor/.vscode-server/bin/74b1f979648cc44d385a2286793c226e611f59e7/node
# makefile (from '.env', line 1)
MAKEFILE_LIST :=  Makefile .env
# makefile (from 'Makefile', line 5)
builds := 
# 'override' directive
GNUMAKEFLAGS := 
# environment
XDG_DATA_DIRS = /usr/local/share:/usr/share:/var/lib/snapd/desktop
# environment
LESSOPEN = | /usr/bin/lesspipe %s
# environment
VSCODE_CWD = /mnt/c/Users/felix/AppData/Local/Programs/Microsoft VS Code
# makefile (from 'Makefile', line 11)
CONTAINER_PROJECT_PATH = /$(APP_NAME)
# default
MAKE_HOST := x86_64-pc-linux-gnu
# environment
PATH = /home/fictor/.vscode-server/bin/74b1f979648cc44d385a2286793c226e611f59e7/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/c/Program Files/Common Files/Oracle/Java/javapath:/mnt/c/Program Files (x86)/Common Files/Oracle/Java/javapath:/mnt/c/Windows/system32:/mnt/c/Windows:/mnt/c/Windows/System32/Wbem:/mnt/c/Windows/System32/WindowsPowerShell/v1.0/:/mnt/c/Windows/System32/OpenSSH/:/mnt/c/Program Files (x86)/NVIDIA Corporation/PhysX/Common:/mnt/c/Program Files/PuTTY/:/mnt/c/Program Files/NVIDIA Corporation/NVIDIA NvDLISR:/mnt/c/Program Files/Git/cmd:/mnt/c/ProgramData/chocolatey/bin:/mnt/c/Program Files/TortoiseGit/bin:/mnt/c/Program Files/dotnet/:/mnt/c/Program Files/Docker/Docker/resources/bin:/mnt/c/ProgramData/DockerDesktop/version-bin:/mnt/c/Users/felix/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/felix/AppData/Local/Programs/Microsoft VS Code/bin:/mnt/c/Users/felix/AppData/Roaming/Code/User/globalStorage/ms-vscode-remote.remote-containers/cli-bin:/mnt/c/Users/felix/AppData/Local/GitHubDesktop/bin:/mnt/c/Users/felix/.dotnet/tools:/snap/bin
# makefile (from 'Makefile', line 5)
script := 
# makefile (from 'Makefile', line 12)
CONTAINER_APP_PATH = $(CONTAINER_PROJECT_PATH)/$(APP_PATH)
# environment
ELECTRON_RUN_AS_NODE = 1
# environment
VSCODE_IPC_HOOK_CLI = /tmp/vscode-ipc-1157ad22-b0c0-4536-8b6f-1fb5b0e7b270.sock
# makefile (from 'Makefile', line 5)
the := 
# default
.FEATURES := target-specific order-only second-expansion else-if shortest-stem undefine oneshell archives jobserver output-sync check-symlink load
# environment
LS_COLORS = rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
# automatic
%F = $(notdir $%)
# makefile (from 'Makefile', line 5)
container := 
# environment
PWD = /home/fictor/dev/clean/simplyV3
# default
.LOADED := 
# environment
WSL_INTEROP = /run/WSL/155_interop
# environment
VSCODE_AMD_ENTRYPOINT = vs/workbench/api/node/extensionHostProcess
# environment
HOME = /home/fictor
# environment
LESSCLOSE = /usr/bin/lesspipe %s %s
# environment
LOGNAME = fictor
# environment
APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL = 1
# environment
VSCODE_HANDLES_UNCAUGHT_ERRORS = true
# automatic
^D = $(patsubst %/,%,$(dir $^))
# environment
MAKELEVEL := 0
# default
MAKE = $(MAKE_COMMAND)
# default
MAKECMDGOALS := all
# makefile (from '.env', line 1)
DOCKER_REGISTRY = fictor
# environment
SHLVL = 0
# default
MAKE_VERSION := 4.2.1
# environment
USER = fictor
# makefile (from 'Makefile', line 2)
.DEFAULT_GOAL := help
# environment
NAME = DESKTOP-3I2DR2F
# makefile (from 'Makefile', line 5)
base := 
# automatic
%D = $(patsubst %/,%,$(dir $%))
# environment
VSCODE_WSL_EXT_LOCATION = /mnt/c/Users/felix/.vscode/extensions/ms-vscode-remote.remote-wsl-0.66.3
# default
MAKE_COMMAND := make
# default
.VARIABLES := 
# automatic
*F = $(notdir $*)
# makefile
MAKEFLAGS = pqrR
# makefile (from 'Makefile', line 5)
Docker := 
# environment
MFLAGS = -pqrR
# automatic
*D = $(patsubst %/,%,$(dir $*))
# automatic
+D = $(patsubst %/,%,$(dir $+))
# automatic
+F = $(notdir $+)
# makefile (from '.env', line 4)
APP_NAME = scrabble
# environment
VSCODE_HANDLES_SIGPIPE = true
# 'override' directive
.SHELLSTATUS := 0
# default
MAKEFILES := 
# automatic
<F = $(notdir $<)
# makefile (from 'Makefile', line 8)
PROJECT_ABSOLUTE_PATH = ${CURDIR}
# makefile (from 'Makefile', line 5)
development := 
# environment
PS1 = \u@\h \[\033[32m\]\w\[\033[33m\]$(parse_git_branch)\[\033[00m\]$ 
# environment
LC_ALL = C
# makefile (from '.env', line 2)
DEV_BASE_IMAGE_TAG = scrabble:latest
# environment
HOSTTYPE = x86_64
# automatic
^F = $(notdir $^)
# makefile (from '.env', line 3)
BUILD_TYPE = DEBUG
# default
SUFFIXES := 
# makefile (from '.env', line 7)
SCRIPT_LOC = "./dockerfiles/scripts"
# default
.INCLUDE_DIRS = /usr/include /usr/local/include /usr/include
# makefile (from 'Makefile', line 5)
This := 
# default
.RECIPEPREFIX := 
# environment
LANG = C
# environment
TERM = xterm-256color
# environment
WSL_DISTRO_NAME = Ubuntu-20.04
# environment
MOTD_SHOWN = update-motd
# variable set hash-table stats:
# Load=85/1024=8%, Rehash=0, Collisions=6/130=5%

# Pattern-specific Variable Values

# No pattern-specific variable values.

# Directories

# . (device 2096, inode 43703): 15 files, no impossibilities.

# 15 files, no impossibilities in 1 directories.

# Implicit Rules

# No implicit rules.

# Files

docker-rebuild:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 64):
	@make docker-delete
	@make .setup-dev-base-image

PHONY: docker-push
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
all:
#  Command line target.
#  Implicit rule search has been done.
#  File does not exist.
#  File has not been updated.

docker-delete:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 59):
	@docker rmi -f ${DOCKER_REGISTRY}/$(DEV_BASE_IMAGE_TAG)
	@rm -f .setup-dev-base-image

.PHONY: build start test clean docker-enter docker-delete docker-rebuild
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
Makefile:
#  Implicit rule search has been done.
#  Last modified 2022-10-22 18:00:03.108615
#  File has been updated.
#  Successfully updated.

.setup-dev-base-image: dockerfiles/ubuntu-dev.dockerfile
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 44):
	@docker build ${SCRIPT_LOC} --rm -f "${FILE_LOC}/ubuntu-dev.dockerfile" -t "${DOCKER_REGISTRY}/${DEV_BASE_IMAGE_TAG}"
	@touch .setup-dev-base-image

# Not a target:
dockerfiles/ubuntu-dev.dockerfile:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

start: build
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 24):
	@./docker.sh "build/src/application"

test: build
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 28):
	@./docker.sh "build/test/basic_test_application"

build: .setup-dev-base-image
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
 
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 20):
	@./docker.sh "mkdir -p build && cd build && pwd && cmake -G Ninja .. && ninja"

# Not a target:
.env:
#  Implicit rule search has been done.
#  Last modified 2022-10-22 16:30:47.186181
#  File has been updated.
#  Successfully updated.

# Not a target:
.DEFAULT:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

clean: .setup-dev-base-image
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 38):
	@./docker.sh "rm -rf build"

docker-enter:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 53):
	@docker run --rm -it \
	--mount type=bind,source="$(PROJECT_ABSOLUTE_PATH)",target="$(CONTAINER_PROJECT_PATH)" \
	 ${DOCKER_REGISTRY}/$(DEV_BASE_IMAGE_TAG) /bin/bash

docker-push: .setup-dev-base-image
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 49):
	docker push ${DOCKER_REGISTRY}/$(DEV_BASE_IMAGE_TAG)

# files hash-table stats:
# Load=17/1024=2%, Rehash=0, Collisions=0/57=0%
# VPATH Search Paths

# No 'vpath' search paths.

# No general ('VPATH' variable) search path.

# strcache buffers: 1 (0) / strings = 29 / storage = 295 B / avg = 10 B
# current buf: size = 8162 B / used = 295 B / count = 29 / avg = 10 B

# strcache performance: lookups = 74 / hit rate = 60%
# hash-table stats:
# Load=29/8192=0%, Rehash=0, Collisions=1/74=1%
# Finished Make data base on Sat Oct 22 20:27:35 2022

 
